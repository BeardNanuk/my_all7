#!/usr/bin/env python

## (obspy) jiazeh@farm:~/inversion_test$ vi zauto_results 
## automated results generation in PPT slides

## created by Jiaze He, ad textplot 
#Fri Sep  7 14:59:33 UTC 2018 

## revised on Sun Nov  4 10:13:31 EST 2018 
## vp/vs results recreation - vs and x/z included 


import argparse, os, sys 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec

# textwrap for plotting text
import textwrap

# generating PPT slides
from pptx import Presentation
from pptx.util import Inches


from seisflows.config import config, loadpy, tilde_expand, Dict
from seisflows.tools import unix

import datetime

import glob
import os 

def getargs():
    parser = argparse.ArgumentParser()

    parser.add_argument('--workdir', nargs='?', 
        default=os.getcwd())

    parser.add_argument('--parameter_file', nargs='?', 
        default='parameters.py')

    parser.add_argument('--path_file', nargs='?', 
        default='paths.py')

    return parser.parse_args()


def textplot(struct_variable,filename):

    attributes = [a for a in dir(struct_variable)
                  if not (a.startswith('__') and a.endswith('__'))
                  and not (a == 'kernel')]

    fig = plt.figure(figsize=(10, 7))
    #fig.suptitle('bold figure suptitle', fontsize=14, fontweight='bold')

    ax = fig.add_subplot(111)
    fig.subplots_adjust(top=0.85)
    ax.set_title(str('parameters'))

    ax.set_xlabel('xlabel')
    ax.set_ylabel('ylabel')

    spc = 0.26

    for i in range(len(attributes)):
        offset = spc * (i)
        str_temp = attributes[i] + ' = ' + str((getattr(struct_variable, attributes[i])))
        #str_temp = attributes[i] + ' = ' + str("%.5f" % (getattr(struct_variable, attributes[i])))
       ###ax.text(0.3, 9.7-offset,textwrap.shorten(str_temp, 110), fontsize=11)
        ax.text(0.3, 9.7-offset, str_temp, fontsize=9)

    ax.axis([0, 10, 0, 10])
    #plt.axis('off')

    plt.savefig(filename,format='png', dpi=500)
    plt.show()
    plt.close()


def add_slide_ze(img_path,filename_pptx,left_start=None,top_start=None,width=None,height=None):

    if left_start is None:
       left_start = 0 

    if top_start is None:
       top_start = 0.9 

    if width is None:
       width = 9

    if height is None:
       height = 5.7

    prs = Presentation(filename_pptx)
 
    blank_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(blank_slide_layout)

    left = Inches(left_start)
    top = Inches(top_start)
    width = Inches(width)
    height = Inches(height)


    pic = slide.shapes.add_picture(img_path, left, top,width=width,height=height)

    # left = Inches(5)
    # height = Inches(5.5)
    # pic = slide.shapes.add_picture(img_path, left, top, height=height)
    
    prs.save(filename_pptx)



if __name__ == "__main__":
    ### workflow submission script
    args = getargs()

    # register parameters
    parameters = loadpy(args.parameter_file)
    sys.modules['seisflows_parameters'] = Dict(parameters)

    # register paths
    paths = tilde_expand(loadpy(args.path_file))
    sys.modules['seisflows_paths'] = Dict(paths)
    
    PAR = sys.modules['seisflows_parameters']
	

    print 'hey'
    print PAR.NT 
    save_parafile='output/paraplot'
    textplot(PAR, save_parafile)
    #add_slide_ze(save_parafile,para.total_filename_pptx)
    ## the relative path and filename to save the results in pptx 
    total_filename_pptx='output/zauto_results.pptx'
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    ## input title of the first slide the pptx
    title.text = "2D Inversion Results - Filter Testing"
    ## input the date and time as the subtitle
    now = datetime.datetime.now()
    subtitle.text = now.strftime("%Y-%m-%d %H:%M") 
    prs.save(total_filename_pptx)
    add_slide_ze(save_parafile,total_filename_pptx)

    #vp_matrix = [1,2,200]
    vp_matrix = [1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,30,40,50,60,70,80,90,100,120,140,160,180,200]
    for i in vp_matrix:
	vp_filename='output/vp%04d.png' % i 
        print vp_filename
        add_slide_ze(vp_filename,total_filename_pptx)
    #vp_matrix = [1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,30,40,50,60,70]
    vs_matrix = vp_matrix
    for i in vs_matrix:
        vs_filename='output/vs%04d.png' % i 
        print vs_filename
        add_slide_ze(vs_filename,total_filename_pptx)

    # max filename only    
    os.chdir('output')
    print(os.getcwd())
    maxfile=max(glob.glob("v*.png"))
    # maxfile with relative path
    maxfilepath='output/'+maxfile
    
    print maxfilepath
    os.chdir('..') 
    print(os.getcwd())
    add_slide_ze(maxfilepath,total_filename_pptx)

    seismo_matrix = [0]


#    for i in seismo_matrix:
#      	seismo_filename='output/traces/obs_event_%06d.png' % i 
#        print seismo_filename
#        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)
#        
#        seismo_filename='output/traces/syn_event_%06d.png' % i 
#        print seismo_filename
#        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)
#
#        seismo_filename='output/traces/last_adj_event_%06d.png' % i 
#        print seismo_filename
#        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)
    prop = 'disp'
    for i in seismo_matrix:
	#seismo_filename='output/traces/obs_event_%06d.png' % i 

        seismo_filename="./output/traces/obs_%s_x_event_%06d.png" % (prop,i)
        print seismo_filename
        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)
        seismo_filename="./output/traces/obs_%s_z_event_%06d.png" % (prop,i)
        print seismo_filename
        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)

        seismo_filename="./output/traces/syn_%s_x_event_%06d.png" % (prop,i)
        print seismo_filename
        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)
        seismo_filename="./output/traces/syn_%s_z_event_%06d.png" % (prop,i)
        print seismo_filename
        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)

        seismo_filename="./output/traces/last_adj_%s_x_event_%06d.png" % (prop,i)
        print seismo_filename
        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)
        seismo_filename="./output/traces/last_adj_%s_z_event_%06d.png" % (prop,i)
        print seismo_filename
        add_slide_ze(seismo_filename,total_filename_pptx,left_start=2, top_start=0.1, width=4,height=6)


    #print maxfile


     
