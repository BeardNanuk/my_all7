#!/bin/sh
''''exec python -W ignore -- "$0" "$@" # '''

import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import pylab
from glob import glob
from os.path import abspath, join
from seisflows.plugins.solver_io.fortran_binary import _read
from seisflows.tools.tools import exists


def getcoords(dir):
    for names in getnames(dir):
        if exists(names):
            x, z = _read(names[0]), _read(names[1])
            return x, z
    else:
        print('Coordinate files not found.')
        sys.exit()


def meshplot(x, y, z):
    """ Plots values on 2D unstructured mesh
    """
    r = (max(x) - min(x))/(max(y) - min(y))
    rx = r/np.sqrt(1 + r**2)
    ry = 1/np.sqrt(1 + r**2)

    f = plt.figure(figsize=(10*rx, 10*ry))
    p = plt.tricontourf(x, y, z, 125)
    plt.axis('image')
    return f, p


def getnames(dir):
    return [
        (abspath(join(dir, subdir, 'proc000000_x.bin')),
         abspath(join(dir, subdir, 'proc000000_z.bin'))) 
         for subdir in [
         '.',
         '../model', 
         '../output/model_init',
         '../../output/model_init',
         '../../../output/model_init',
         '../../../../output/model_init',
         ]]


msg = '''
%s\nmin, max: %f, %f
'''


if __name__ == '__main__':
    """ Plots data on 2-D unstructured mesh

    Reads mesh coordinates from first two columns of text file and data from
    subsequent columns, computes Delaunay triangulation, and plots data
    using matplotlib.

    In particular, can be used to plot kernels and models output from SPECFEM2D
    on unstructured GLL bases.
    """
    dirname1 = sys.argv[1]
    dirname2 = sys.argv[2]  
    variable = sys.argv[3]
    filenames  = glob(dirname1 + '/proc000000_' + variable + '.bin*')
    filenames2 = glob(dirname2 + '/proc000000_' + variable + '.bin*')
    filenames.sort()

    x,z = getcoords(dirname1)

    for i, filename in enumerate(filenames):
     for j, filename2 in enumerate(filenames2):
        par = filename.split("000000_",1)[1] 
        par = par[0:len(par)-4]
        print par
        v1 = _read(filename)
        v2 = _read(filename2)
        w = abs(v1-v2) 
        f, p = meshplot(x, z, w) 
        plt.xticks( color = 'k', size = 18)
        plt.yticks( color = 'k', size = 18)
        p.set_cmap(plt.cm.rainbow)
        cbar=plt.colorbar(fraction=0.046, pad=0.04,orientation='vertical')
        cbar.ax.tick_params(labelsize=18) 
        #plt.show()
        figure = plt.gcf() # get current figure
        figure.set_size_inches(10, 6)
        pylab.title('abs diff ' + par,size=30)
        plt.savefig(par + '_diff_abs_vrai_inverse.png')
