#!/bin/bash 

### generate images from bin files automatically, in parallel 
## Creation time: Tue Jun 11 15:59:47 UTC 2018
## Revision time: Thu Jun 21 13:35:52 UTC 2018
## Jiaze He, jiazeh@princeton.edu


traces_DIR=traces

if [ -d "$traces_DIR" ]; then
    echo 'nothing'
  else
    echo 'make a folder'
    mkdir "./output/$traces_DIR"
fi

############## parameter grebbing ################
# greb the total iteration number in the misfit file 
	Nit=`wc -l ./output.stats/misfit | cut -f1 -d' '`

# break the total iterations in the small chucks. Each chuck will be excuted in parallel with all
# the process a computer have; the trick is to include & for continue excution without waitiing;
# it works only with the number total jobs in each iteration (10) larger than the total core numbers (8)
# but also will have enough memory for the computer to "SAVE" for undone jobs (due to '&')
	Nloop=$(($Nit/$jobs_perchuck+1))

# get the lines to search for, then search the word "NSTEP", output the number after the '='
	NSTEP=$(sed -n 26,28p specfem_data/Par_file | grep 'NSTEP' | cut -d\= -f2 | tr -d '[:space:]')

# Get various parameters to determine the repository name and the images to process
	AC_or_El=`grep ^MATERIALS   ./parameters.py | cut -d = -f 2 | sed 's/ //g'| tr -d \'`
	Density=`grep ^DENSITY   ./parameters.py | cut -d = -f 2 | sed 's/ //g' | tr -d \'`
	Nevent=$(sed -n 17,19p ./parameters.py | grep 'NSRC' | cut -d\= -f2 | sed 's/\#.*//')

	echo  -e "\033[32m\033[1mSimulation : $AC_or_El\033[0m"
	echo  -e "\033[32m\033[1mDensity : $Density\033[0m"
	echo  -e "\033[32m\033[1mNumber of iterations: $Nit\033[0m"
	echo
	echo  -e "\033[31m\033[1mOutput seismographs\033[0m"

############## parameter grebbing ################

############### Plot the seismograms ################
#
#      str='Elastic'
#      Nevent=$(($Nevent-1)) # make loop easy
#      echo $Nevent 
#
#      Xint=1.0
#      Yint=200.0
#      Clip_percent=90
#      
#      for n_event in `seq 0 $Nevent` ; do
#      	NE="$(printf "%06d" $n_event)"
#      	echo 'the number of events for seimography generation is '$NE
#
#      	if [ "$AC_or_El" == "$str" ]
#      	then
#      	./savesismo ./scratch/solver/$NE/traces/obs/Ux_file_single.su -save=./output/traces/obs_disp_x_event_$NE.png -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/obs/Uz_file_single.su -save=./output/traces/obs_disp_z_event_$NE.png -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/syn/Ux_file_single.su -save=./output/traces/syn_disp_x_event_$NE.png -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/syn/Uz_file_single.su -save=./output/traces/syn_disp_z_event_$NE.png -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/adj/Ux_file_single.su.adj -save=./output/traces/last_adj_disp_x_event_$NE.png -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/adj/Uz_file_single.su.adj -save=./output/traces/last_adj_disp_z_event_$NE.png -xint=$Xint -yint=$Yint > /dev/null &
#      	else
#      	./savesismo ./scratch/solver/$NE/traces/obs/Up_file_single.su -save=./output/traces/obs_event_$NE.png -c=$Clip_percent -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/syn/Up_file_single.su -save=./output/traces/syn_event_$NE.png -c=$Clip_percent -xint=$Xint -yint=$Yint > /dev/null &
#      	./savesismo ./scratch/solver/$NE/traces/adj/Up_file_single.su.adj -save=./output/traces/last_adj_event_$NE.png -c=$Clip_percent -xint=$Xint -yint=$Yint > /dev/null &
#      	fi
#      done
#      wait

########################### Plot the seismograms ################



############## Plot the models ################
## see if png files exist
	count=`ls -1 ./output/*.png 2>/dev/null | wc -l`
        if [ $count -eq 0 ]
        then
        echo 'nothing'
        else
        echo $count
        rm ./output/*.png
        fi

# i.e., 3 jobs each loop, then total jobs perchuck is 3*jobs_perchuck = 30; this number
############# Plot the models ################
# should be larger than the number of cores (to make the most use of the computer)
# should also be small enough to make the computers memory not blow up
	jobs_perchuck=1




# folder to create 
	bk_DIR=yyoutput
	if [ -d "$bk_DIR" ]; then
	echo 'nothing'
	else
	echo 'make a folder'
	mkdir "$bk_DIR"
	fi
	
	#foldname_for_results_saving=$(printf "./yyoutput/noutput_$NSTEP")
	foldname_for_results_saving=$(printf "./yyoutput/noutput_NSTEP_${NSTEP}_Nevent${Nevent}")
	if [ -d "$foldname_for_results_saving" ]; then
	echo 'nothing'
	else
	echo 'make a folder'
	mkdir "$foldname_for_results_saving" 
	fi

# input what to plot 
	filename2='vp' # 'vp','vs','*'(for *, see what has been excluded for plotting in zplotbin)
	for i in `seq 20 $Nloop`;do
		for j in `seq 1 $jobs_perchuck` ;do
		k=$(($jobs_perchuck*$i+$j))
		if [ "$k" -gt "$Nit" ]
		then
		break  # Skip entire rest of loop.
		fi
		K="$(printf "%04d" $k)"
		dirname=$(printf "./output/model_$K")
		fullp=$(printf "./output/model_$K_$filename2.bin");
		echo $fullp
		./zplotbin $dirname $filename2 $k 
#       	    cp $REP/model_true/*_[xz].bin $REP/output/model_$K
#       	    python $REP/plotbin $REP/output/model_$K $REP/Images/$variable/model/It$K $variable  >> xxx &
#       	    ./plot_grad_and_diff $k $variable $REP/Images/$variable/analyse/It$K >> xxx &
		done
	wait
	done
wait	
########################## Plot the models ################

echo 'number of time steps is '$NSTEP 
echo 'bk path is '$foldname_for_results_saving
./plotvp ./model_true/ $filename2 

echo "plotting png has been completed"
#cp -fr "$foldname_for_results_saving" "$foldname_for_results_saving"/
#rsync -av --progress ./* "$foldname_for_results_saving"/ --exclude "$foldname_for_results_saving"/


# cp -r output/ "$foldname_for_results_saving"/ &
# cp -r output.stats/ "$foldname_for_results_saving"/ &
# cp -r specfem_data/ "$foldname_for_results_saving"/ &
# cp -r z* "$foldname_for_results_saving"/ &
# cp -r p* "$foldname_for_results_saving"/ &
# cp -r v* "$foldname_for_results_saving"/ &
# cp -r sa* "$foldname_for_results_saving"/ &
# cp -r p* "$foldname_for_results_saving"/ &

echo "copying files has been completed"
#cp -r output/* yyoutput/newoutput/
#for i in `seq 0 $Nit`;
#do
#    #dirname=./output/model_0001
#    dirname=$(printf "./output/model_%04d" $i)
#    filenames2=_vp
#    fullp=$dirname/proc000000$filenames2.bin
#    echo $fullp
#    #vi $fullp	
#    ./zplotbin $dirname 'vp' $i
#    #./zplotbin $dirname '*' $i 
#done
