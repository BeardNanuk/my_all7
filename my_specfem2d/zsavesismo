#!/usr/bin/env python

# save several seismo signals 
# Specialized script used to visualize seismic section.

# create on Tue Jul 17 14:57:36 UTC 2018
# Creator: Jiaze He 

# revised at Mon Sep 10 17:21:35 EDT 2018
# revised by Jiaze He 
# include single vp plot for individual signals. 


# import argparse

from obspy import read
import matplotlib.pyplot as plt
import pickle

from seisflows.tools.graphics import plot_vector, plot_section

import numpy as np
import pandas as pd	

# for file finding
import glob


### seisflow module
from seisflows.config import config, loadpy, tilde_expand, Dict
from seisflows.tools import unix
import argparse, os, sys

## for travel time 
from scipy.signal import hilbert as _analytic


def getargs():
    parser = argparse.ArgumentParser()

    parser.add_argument('--workdir', nargs='?',
        default=os.getcwd())

    parser.add_argument('--parameter_file', nargs='?',
        default='parameters.py')

    parser.add_argument('--path_file', nargs='?',
        default='paths.py')

    return parser.parse_args()




### workflow submission script
args = getargs()

# register parameters
parameters = loadpy(args.parameter_file)
sys.modules['seisflows_parameters'] = Dict(parameters)

# register paths
paths = tilde_expand(loadpy(args.path_file))
sys.modules['seisflows_paths'] = Dict(paths)

PAR = sys.modules['seisflows_parameters']



OUTPUT_FILES_path = "OUTPUT_FILES"

signal_type_list = glob.glob(OUTPUT_FILES_path + '/' + "U*.txt")


mat_rec_plot = np.array([180, 200, 225]) 
num_rec = len(mat_rec_plot)

time_function_type = 8
    
if time_function_type == 8: 
    usct_load = np.loadtxt("DATA/stf_cut_3rd_filtered_20000")
    #usc_load = np.loadtxt("DATA/filtered_signal_no_delay")
    t = usct_load[0:19000,0]
    #pl.subplot(1, 1, 1)
    #plt.plot(t, usct_load, 'o-')
    #plt.show()


else:
    #total_time = PAR.DT * PAR.NT
    t = np.arange(2.5e-8,0.000375+2e-8,2.5e-8) 

time_steps_exp = 15000

for f in signal_type_list:
    print(f)
    fhead=(f[len(OUTPUT_FILES_path)+1:len(OUTPUT_FILES_path)+3])
    if fhead=='Ux':
        data_load_Ux = np.loadtxt(f)
    elif fhead=='Uz':
        data_load_Uz = np.loadtxt(f)
    elif fhead=='U_':
        data_load_U_ = np.loadtxt(f)
    elif fhead=='Ue':
        data_load_Ue_novalues = pd.read_csv(f,header=None)
        # to make the experimental signals compariable to the amplitude 
        # of specfem2d's output
        data_load_Ue=0.0297361*data_load_Ue_novalues.values.transpose()  

nd_cc = np.correlate(data_load_Ue[1:time_steps_exp,2],data_load_U_[1:time_steps_exp,2],"same")
print(nd_cc)
print('data_load_U_ max: %40.39f ' %(data_load_U_.max().max()))
print('data_load_Ue max: %40.39f ' %(data_load_Ue.max().max()))

print(nd_cc.argmax(axis=0))
print('steps to apply for extra deleay reduction',nd_cc.argmax(axis=0)-time_steps_exp/2)

## according to convoluion 
def Traveltime(syn, obs, nt, dt):
    cc = abs(np.convolve(obs, np.flipud(syn)))
    return (np.argmax(cc)-nt+1)*dt

time_diff =Traveltime(data_load_Ue[1:time_steps_exp,2], data_load_U_[1:time_steps_exp,2], time_steps_exp, PAR.DT) 
print('difference in time in s:', time_diff)
print('difference in timesteps :', time_diff/PAR.DT)



fig = plt.figure()
 
for i in range(num_rec):
    col_num = mat_rec_plot[i] 
    titlename = fhead + ' receiver: %d ' % (col_num) 
    #fig, ax = plt.subplot(num_rec, 1, i+1)
    ax = fig.add_subplot(num_rec, 1, i+1)
    ax.plot(t, data_load_Ux[:,col_num], 'b-',label='Ux')
    ax.plot(t, data_load_Uz[:,col_num], 'g-',label='Uz')
    ax.plot(t, data_load_U_[:,col_num], 'm-',label='U_')
    ax.plot(t[0:time_steps_exp], data_load_Ue[:,col_num], 'r-',label='Ue')
    ax.hold(True)
    
    ax.set_title(titlename)
    ax.legend()


u_receives_signals_fn = OUTPUT_FILES_path + '/' + 'receives_signals' 

plt.savefig(u_receives_signals_fn, format='eps', dpi=1000)
    #plt.savefig('OUTPUT_FILES/u_receives_signals.png', format='png')
pickle.dump(fig,open('OUTPUT_FILES/U_norm.pickle','wb'))
plt.show()     


     
